<#+ 
/*
Copyright 2014 i-nercya intelligent software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
void RoundDateJsonConverterGeneration_Render(DataLayerGeneration generation)
{
	bool generateRoundDateJsonConverter = generation.EntitySettings.Any(entity => entity.RoundDateFields != null);
	if (!generateRoundDateJsonConverter) return;
#>
namespace <#= generation.RootNamespace #>
{
    public class RoundDateJsonConverter : Newtonsoft.Json.Converters.DateTimeConverterBase
    {
        public override bool CanConvert(Type objectType)
        {
            return typeof(DateTime) == objectType || typeof(DateTime) == objectType;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            DateTime? result = null;
            if (reader.TokenType == Newtonsoft.Json.JsonToken.String)
            {
                string valueAsString = (string)reader.Value;
                DateTime? date = (DateTime?)Newtonsoft.Json.Linq.JToken.Parse("\"" + valueAsString + "\"");
                if (date.HasValue) result = date.Value.AddHours(12).Date;
            }
            else if (reader.TokenType == Newtonsoft.Json.JsonToken.Date)
            {
                result = ((DateTime)reader.Value).AddHours(12).Date;
            }
            if (result == null && objectType == typeof(DateTime)) return DateTime.MinValue;
            return result; 
        }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (value == null)
            {
                writer.WriteNull();
            }
            else
            {
                DateTime date = ((DateTime)value).AddHours(12).Date;
                writer.WriteValue(date.ToString("yyyy-MM-dd"));
            }
        }
    }
}
<#+
}
#>